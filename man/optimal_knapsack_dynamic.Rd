% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/knapsack_dynamic.R
\name{optimal_knapsack_dynamic}
\alias{optimal_knapsack_dynamic}
\title{0-1 Knapsack Problem Solver (Dynamic optimal)}
\usage{
optimal_knapsack_dynamic(x, W)
}
\arguments{
\item{x}{A data frame with two columns:
- `w`: Weights of the items.
- `v`: Values of the items.}

\item{W}{A numeric value representing the maximum weight capacity of the knapsack.}
}
\value{
The maximum value that can be obtained within the weight limit.
}
\description{
This function solves the knapsack problem using a dynamic programming approach.
It finds the optimal subset of items that maximizes the total value without exceeding
the weight capacity.
}
\details{
The function uses a recursive approach through dynamic programming. For each stage `k`,
representing an item, it calculates the maximum value that can be obtained considering
the current item and the remaining capacity `i`. The decision at each stage is whether to
take or leave the item, depending on whether it fits in the remaining capacity.

The function works backward from the last item to the first, recursively evaluating both
decisions (take or leave) and selecting the one that provides the higher value, provided
the weight constraint is respected.
}
\examples{
# Example usage:
items <- data.frame(w = c(3, 8, 5), v = c(4, 6, 5))
W <- 8
knapsack_dynamic(items, W)  # 9

}
\references{
https://en.wikipedia.org/wiki/Knapsack_problem#0.2F1_knapsack_problem
}
